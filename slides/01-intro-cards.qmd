

## This workshop is for you if...

::: {.larger}
- You want to learn about ARDs

- You want to learn about new tools for working with ARDs

- You want to learn how to make displays from ARDs

- You want to practice coding with hands-on exercises
:::

## Workshop expectations

::: {.larger}

- What to do if you find a bug? 

- Ask questions!

- Let us know in the chat if you need help

- Be respectful, follow the Terms and Conditions of R/Pharma
https://rinpharma.com/terms/

:::

## Instructors

::: {layout="[1, 1]"}

![Daniel Sjoberg, Roche](images/dan-circle.png){fig-alt="Headshot of Daniel Sjoberg" width="400"}


![Becca Krouse, GSK](images/becca.png){fig-alt="Headshot of Becca Krouse" width="300"}

:::

::: {.larger}
Who are we?
What do we do?
Why are we here?
:::

## Who are you?

link to slido quiz


## Workshop outline

::: {.larger}

- Analysis Results Standard (ARS) and Analysis Results Data (ARD)

- {cards} R package

- {cardx} R package

- Tabling with {gtsummary} and {tfrmt}

:::

## Working environment

::: {.larger}

- For consistency, we will be working in RStudio Cloud  

- Everything has been installed and set up for you 

- Following the course, all content from this workshop will be available on GitHub 

:::

## Quick warm-up

::: {.larger}

- RStudio cloud setup

- Running a bit of code

:::


# Analysis Results Standard

## Analysis Results Standard (ARS)

![](images/ars-flow.png){.fragment fig-align="center"}

![](images/ars-objectives.png){.fragment fig-align="center"}


## Analysis Results Standard (ARS)

-   Emerging standard for **prospectively** encoding statistical analysis reporting pipeline in a machine-readable format.

-   Primary objectives are to leverage analysis results metadata to drive the automation of results and support storage, access, processing, traceability and reproducibility of results.

-   Logical model that describes analysis results and associated metadata.

-   Focus on concepts, _not layout_, e.g. the summary statistics, not how the results are shown in a table. 

-   Learn more at [https://www.cdisc.org/events/webinar/analysis-results-standard-public-review](https://www.cdisc.org/events/webinar/analysis-results-standard-public-review) 


## Analysis Results Standard (ARS)

Example ARS Flow

![](images/ars-example-flow.png){fig-align="center"}

## Analysis Results Standard (ARS)

Example ARS Flow

![](images/ars-example-flow-with-hex.png){fig-align="center"}

## Analysis Results Data (ARD)

* Encodes statistical analysis outcomes in a machine-readable format.

* Primary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.

* The ARD model specified how statistical results are saved into a structured format.

* The ARD can be used to to subsequently create tables and figures.


## Analysis Results Data (ARD)

* After the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs.

![](images/ard-flow.png){fig-align="center"}

## A few notes about ARDs

* QC is done on raw value 
    * You don’t have to waste time trying to match formatting to match QC

* But… 
    * QC will be more sensitive to floating point
    * QC tolerance will need to be defined

* ARD can be saved as a dataset (rds, xpt, etc) or json file


# {cards} 

## {cards} R Package <a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="right" height="138" alt="cards website" /></a>

Let's check out a simple example 

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ard_continuous(ADSL, variables = AGE)
```


## {cards}: `ard_continuous()` arguments

::: {.small}
- `by`: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels

- `statistic`: specify univariate summary statistics. Accepts _any_ function, base R, from a package, or user-defined.

- `fmt_fn`: Override the default formatting functions, e.g. when you need 

:::

```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               # stats by treatment arm
    statistic = ~list(mean = \(x) mean(x)), # return the mean
    fmt_fn = ~list(mean = 0)                # format the result
  ) |> 
  apply_fmt_fn() # add a character column of rounded results
```

## {cards}: `ard_continuous()` statistics

```{r}
tidy_ttest <- function(x){
  t.test(x) |> broom::tidy()
}
tidy_ttest(ADSL$AGE)

ard_continuous(
  data = ADSL,
  variables = AGE,
  statistic = ~ list(tidy_ttest = tidy_ttest)
)

```


## {cards}: `ard_categorical()`

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1
  ) |> 
  dplyr::filter(stat_name %in% c("n", "p")) |> # keep most common stats 
  print(n = 8)
```

::: {.small}

_Any unobserved levels of the variables will be present in the resulting ARD._
:::

## {cards}: `ard_dichotomous()`

```{r}
#| message: true

ADSL |> 
  ard_dichotomous(variables = AGEGR1, 
                  value = ~ "<65") 

```

## {cards}: Other Summary Functions

- `ard_hierarchical()`: similar to `ard_categorical()`, but built for nested tabulations, e.g. AE terms within SOC

- `ard_complex()`: similar to `ard_continuous()`, but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.

- `ard_missing()`: tabulates rates of missingness

The results from all these functions are entirely compatible with one another, and can be stacked into a single data frame.

## {cards}: Other Functions

In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.

Constructing: `bind_ard()`, `tidy_as_ard()`, `nest_for_ard()`, `check_ard_structure()`, and many more

Wrangling: `shuffle_ard()`, `get_ard_statistics()`, `replace_null_statistic()`, etc.

## Exercise

demog summaries

## {cards}: Stacking utilities

::: {.small}
- `data` and `.by` are shared by all `ard_*` calls

- Additional Options `.overall`, `.missing`, `.attributes`, and `.total_n` provide even more results

:::

```{r}
#| message: true
ADSL |> 
  ard_stack( 
    .by = ARM,      
    ard_continuous(variables = AGE), 
    ard_categorical(variables = c(AGEGR1, SEX))
  )  
```

## {cards}: `ard_hierarchical` 

::: {.small}

This function specializes in calculating **participant**-level rates.

- Levels of nesting are specified in `variables`, and rates will be returned for the lowest level variables

- `id` helps to check that no duplicate rows exist within the `c(id, variables)` columns

- `denominator` dictates the denominator for the rates

:::

```{r}
ard_hierarchical(
  data = ADAE |>
    dplyr::slice_tail(n = 1L, by = c(USUBJID, TRTA, AESOC, AEDECOD)),
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

## {cards}: `ard_hierarchical_count` 

::: {.small}

This function specializes in calculating **event**-level frequencies.

:::

```{r}
ard_hierarchical_count(
  data = ADAE,
  variables = c(AESOC, AEDECOD),
  by = TRTA
)
```

## {cards}: Stacking functions for `ard_hierarchical_*`


## Exercise 

AE summaries