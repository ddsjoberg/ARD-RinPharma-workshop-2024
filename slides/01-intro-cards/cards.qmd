# ARDs using {cards} 

<a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="center" height="300" alt="cards website" /></a>

## {cards}: Introduction

-   Part of the Pharmaverse

-   Collaboration between Roche, GSK, Novartis

-   Contains a variety of utilities for making ARDs

-   Can be used within the ARS workflow and separately

-   45k downloads per month ü§Ø


## {cards}: `ard_continuous()`

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ADSL |> 
  ard_continuous(
    variables = AGE
  )
```


## {cards}: `ard_continuous()` by variable

::: {.small}
- `by`: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels
:::

```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM         # stats by treatment arm
  ) 
```

## {cards}: `ard_continuous()` statistics

::: {.small}
- `statistic`: specify univariate summary statistics. Accepts _any_ function, base R, from a package, or user-defined.
:::


```{r}
cv <- function(x)  sd(x, na.rm = TRUE)/mean(x, na.rm = TRUE)

ADSL |> 
  ard_continuous(  
    variables = AGE,
    by = ARM,
    statistic = ~ list(cv = cv) # customize statistics
  )

```

## {cards}: `ard_continuous()` statistics

::: {.small}
Customize the statistics returned for each variable
:::

```{r}
ADSL |> 
  dplyr::mutate(AGE2 = AGE) |> 
  ard_continuous(
    variables = c(AGE, AGE2),
    by = ARM,
    statistic = list(AGE = list(cv = cv),
                     AGE2 = continuous_summary_fns(c("mean","median")))
  )
```

## {cards}: `ard_continuous()` fmt_fn

::: {.small}
Override the default formatting functions, method 1:
:::
 
```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               
    fmt_fn = ~list(mean = 0)                
  ) |> 
  apply_fmt_fn() # add a character column of rounded results
```

## {cards}: `ard_continuous()` fmt_fn

::: {.small}
Override the default formatting functions, method 2:
:::

```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               
  ) |> 
  update_ard_fmt_fn(stat_names = "mean", fmt_fn = 0) |> 
  apply_fmt_fn() 
```

## {cards}: `ard_categorical()`

::: {.small}
- includes `n`, `%`, `N` by default
:::

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1
  ) 
```

::: {.small}

_Any unobserved levels of the variables will be present in the resulting ARD._
:::


## {cards}: Other Summary Functions 

- `ard_dichotomous()`: similar to `ard_categorical()`, but for dichotomous summaries

- `ard_hierarchical()`: similar to `ard_categorical()`, but built for nested tabulations, e.g. AE terms within SOC

- `ard_complex()`: similar to `ard_continuous()`, but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.

- `ard_missing()`: tabulates rates of missingness

The results from all these functions are entirely compatible with one another, and can be stacked into a single data frame. ü•û

## {cards}: Other Functions

In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs. 

Constructing: `bind_ard()`, `tidy_as_ard()`, `nest_for_ard()`, `check_ard_structure()`, and many more

Wrangling: `shuffle_ard()`, `get_ard_statistics()`, `replace_null_statistic()`, etc.


## {cards}: Stacking utilities

::: {.small}
- `data` and `.by` are shared by all `ard_*` calls

- Additional Options `.overall`, `.missing`, `.attributes`, and `.total_n` provide even more results

- By default, summaries of the `.by` variable are included
:::

```{r}
#| message: true
ADSL |> 
  ard_stack( 
    .by = ARM,      
    ard_continuous(variables = AGE, statistic = ~ continuous_summary_fns(c("mean","sd"))), 
    ard_categorical(variables = AGEGR1, statistic = ~ "p")
  )  
```

## Exercise üèÉ‚Äç‚û°Ô∏è

- Open `exercises/01-cards-partA.R` 

- Compute the demographic summaries as described

```{r}
#| echo: false
#| cache: false
library(countdown)
countdown(minutes = 10, play_sound = TRUE)
```

## Solutions for `01-cards-partA.R`

```{r}
#| echo: FALSE
library(dplyr)
library(tidyr)

## Import data
adsl <- pharmaverseadam::adsl |>
  filter(SAFFL == "Y") |>
  left_join(
    pharmaverseadam::advs |>
      filter(PARAMCD %in% c("BMI", "HEIGHT", "WEIGHT"), !is.na(AVAL)) |>
      group_by(USUBJID, PARAMCD) |>
      arrange(ADY) |>
      slice(1) |>
      ungroup() |>
      select(USUBJID, PARAMCD, AVAL) |>
      pivot_wider(names_from = PARAMCD, values_from = AVAL),
    by = "USUBJID"
  )
```

## Solutions for `01-cards-partA.R`

A. First, compute the continuous summaries for AGE, BMI, HEIGHT, WEIGHT by TRT01A

```{r}
#| eval: FALSE
ard_continuous(
  data = adsl,
  by = ,
  variables =
)
```

## Solutions for `01-cards-partA.R` 

A. First, compute the continuous summaries for AGE, BMI, HEIGHT, WEIGHT by TRT01A
```{r}
ard_continuous(
  data = adsl,
  by = TRT01A,
  variables = c(AGE, BMI, HEIGHT, WEIGHT)
)
```

## Solutions for `01-cards-partA.R`

B. Next, compute the categorical summaries for AGEGR1, SEX, RACE, ETHNIC by TRT01A

```{r}
#| eval: FALSE
ard_categorical(
  data = adsl,
  by = ,
  variables =
)
```

## Solutions for `01-cards-partA.R`

B. Next, compute the categorical summaries for AGEGR1, SEX, RACE, ETHNIC by TRT01A

```{r}
ard_categorical(
  data = adsl,
  by = TRT01A,
  variables = c(AGEGR1, SEX, RACE, ETHNIC)
)
```

## Solutions for `01-cards-partA.R`

C. Perform all of the summaries in a single ard_stack() call, including:
  
    - summaries by TRT01A as performed above
    
    - continuous summaries from part A for AGE, BMI, HEIGHT, and WEIGHT
    
    - categorical summaries from part B for AGEGR1, SEX, RACE, ETHNIC

```{r}
#| eval: FALSE
ard_stack(
  data = adsl,
  .by = ,

  # add ard_* calls here

)
```


## Solutions for `01-cards-partA.R`

C. Perform all of the summaries in a single ard_stack() call, including:
   
    - summaries by TRT01A as performed above
    
    - continuous summaries from part A for AGE, BMI, HEIGHT, and WEIGHT
    
    - categorical summaries from part B for AGEGR1, SEX, RACE, ETHNIC

```{r}
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC))
)
```

## Solutions for `01-cards-partA.R`

D. BONUS!
   For part C. above, add the following pieces
   
    - overall summaries for all of the variables
    
    - total N
    
(Hint: Modify the `.overall` and `.total_n` arguments, respectively)

```{r}
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC))
)
```

## Solutions for `01-cards-partA.R`

D. BONUS!
   For part C. above, add the following pieces
   
    - overall summaries for all of the variables
    
    - total N
    
(Hint: Modify the `.overall` and `.total_n` arguments, respectively)

```{r}
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC)), 
  .overall = TRUE,
  .total_n = TRUE
)
```


## {cards}: Hierarchical Summary Functions

Following hierarchical summary functions aid in nested tabulations (e.g. AE terms within SOC):

-   `ard_hierarchical()`: calculating nested subject-level rates

-   `ard_hierarchical_count()`: calculating nested event-level counts
  

## {cards}: `ard_hierarchical` 

::: {.small}

This function specializes in calculating **subject**-level rates.

- Rates computed on lowest level `variables`, nested within others

- `id` helps to check that no duplicate rows exist within the `c(id, variables)` columns

- `denominator` dictates the denominator for the rates

:::

```{r}
#| echo: FALSE

adae <- ADAE |> 
  dplyr::filter(AESOC %in% unique(AESOC)[1:3]) |> 
  dplyr::group_by(AESOC) |> 
  dplyr::filter(AEDECOD %in% unique(AEDECOD)[1:3]) |> 
  dplyr::ungroup()
```

```{r} 
ard_hierarchical(
  data = adae |> dplyr::slice_tail(n = 1L, by = c(USUBJID, TRTA, AESOC, AEDECOD)),
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

## {cards}: `ard_hierarchical_count` 

::: {.small}

This function specializes in calculating **event**-level frequencies.

:::

```{r}
ard_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA
)
```

## Hierarchical summaries many ways

- Displays for hierarchical data typically report on each level of the hierarchy (Any AE Overall, by System Organ Class, by Preferred Term)

- This can mean several calls to the `ard_hierarchical_*` functions 

- Further, subject-level summaries require a different subset of the data each time. For example, to calculate Overall rates, we need to subset to 1 record per subject in ADAE. 

::: {.fragment}
- Is there an easier way?
:::

## {cards}: Stacking function for `ard_hierarchical()`

::: {.small}

- `ard_hierarchical` stacking functions simplify this multi-step process into a single step

- The `id` argument is used to subset the data along the way

:::

```{r}
#| eval: FALSE
ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = adsl
)
```

```{r}
#| echo: FALSE
ard_hier <- ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )

```

## {cards}: Stacking function for `ard_hierarchical_count()`

::: {.small}

- Below is the stacking function for event-level summaries, aligned with `ard_hierarchical_count()`

:::

```{r}
#| eval: FALSE
ard_stack_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = adsl
)
```

```{r}
#| echo: FALSE
ard_hier_c <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier_c |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )
```


## Exercise üèÉ‚Äç‚û°Ô∏è

- Open `exercises/01-cards-partB.R` 

- Compute the nested AE tabulations as described

```{r}
#| echo: false
#| cache: false
library(countdown)
countdown(minutes = 8, play_sound = TRUE)
```

## Solutions for `01-cards-partB.R`

```{r}
#| echo: FALSE
adsl <- pharmaverseadam::adsl |> dplyr::filter(SAFFL == "Y")
adae <- pharmaverseadam::adae 
```

:::{.smaller}
Calculate the number and percentage of *unique* subjects (USUBJID) with at least one AE:
  
- Overall
- By each SOC (AESOC)
- By each Preferred term (AEDECOD) within SOC (AESOC)
  
By every combination of treatment group (TRT01A) and severity (AESEV)
:::
```{r}
#| eval: FALSE

ard_stack_hierarchical(
  data = ,
  variables = ,
  by = , 
  id = ,
  denominator = 
)
```


## Solutions for `01-cards-partB.R`

:::{.smaller}
Calculate the number and percentage of *unique* subjects (USUBJID) with at least one AE:
  
-   Overall
-   By each SOC (AESOC)
-   By each Preferred term (AEDECOD) within SOC (AESOC)
  
By every combination of treatment group (TRT01A) and severity (AESEV)
:::
```{r}
ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = c(TRT01A, AESEV), 
  id = USUBJID,
  denominator = adsl
)
```



