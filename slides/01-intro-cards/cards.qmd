# {cards} 

## {cards} R Package <a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="right" height="138" alt="cards website" /></a>

Let's check out a simple example 

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ard_continuous(ADSL, variables = AGE)
```


## {cards}: `ard_continuous()` arguments

::: {.small}
- `by`: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels

- `statistic`: specify univariate summary statistics. Accepts _any_ function, base R, from a package, or user-defined.

- `fmt_fn`: Override the default formatting functions, e.g. when you need 

:::

```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               # stats by treatment arm
    statistic = ~list(mean = \(x) mean(x)), # return the mean
    fmt_fn = ~list(mean = 0)                # format the result
  ) |> 
  apply_fmt_fn() # add a character column of rounded results
```

## {cards}: `ard_continuous()` statistics

```{r}
tidy_ttest <- function(x){
  t.test(x) |> broom::tidy()
}
tidy_ttest(ADSL$AGE)

ard_continuous(
  data = ADSL,
  variables = AGE,
  statistic = ~ list(tidy_ttest = tidy_ttest)
)

```


## {cards}: `ard_categorical()`

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1
  ) |> 
  dplyr::filter(stat_name %in% c("n", "p")) |> # keep most common stats 
  print(n = 8)
```

::: {.small}

_Any unobserved levels of the variables will be present in the resulting ARD._
:::

## {cards}: `ard_dichotomous()`

```{r}
#| message: true

ADSL |> 
  ard_dichotomous(variables = AGEGR1, 
                  value = ~ "<65") 

```

## {cards}: Other Summary Functions

- `ard_hierarchical()`: similar to `ard_categorical()`, but built for nested tabulations, e.g. AE terms within SOC

- `ard_complex()`: similar to `ard_continuous()`, but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.

- `ard_missing()`: tabulates rates of missingness

The results from all these functions are entirely compatible with one another, and can be stacked into a single data frame.

## {cards}: Other Functions

In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.

Constructing: `bind_ard()`, `tidy_as_ard()`, `nest_for_ard()`, `check_ard_structure()`, and many more

Wrangling: `shuffle_ard()`, `get_ard_statistics()`, `replace_null_statistic()`, etc.

## Exercise

demog summaries

## {cards}: Stacking utilities

::: {.small}
- `data` and `.by` are shared by all `ard_*` calls

- Additional Options `.overall`, `.missing`, `.attributes`, and `.total_n` provide even more results

:::

```{r}
#| message: true
ADSL |> 
  ard_stack( 
    .by = ARM,      
    ard_continuous(variables = AGE), 
    ard_categorical(variables = c(AGEGR1, SEX))
  )  
```

## {cards}: `ard_hierarchical` 

::: {.small}

This function specializes in calculating **participant**-level rates.

- Levels of nesting are specified in `variables`, and rates will be returned for the lowest level variables

- `id` helps to check that no duplicate rows exist within the `c(id, variables)` columns

- `denominator` dictates the denominator for the rates

:::

```{r}
ard_hierarchical(
  data = ADAE |>
    dplyr::slice_tail(n = 1L, by = c(USUBJID, TRTA, AESOC, AEDECOD)),
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

## {cards}: `ard_hierarchical_count` 

::: {.small}

This function specializes in calculating **event**-level frequencies.

:::

```{r}
ard_hierarchical_count(
  data = ADAE,
  variables = c(AESOC, AEDECOD),
  by = TRTA
)
```

## {cards}: Stacking functions for `ard_hierarchical_*`


## Exercise 

AE summaries