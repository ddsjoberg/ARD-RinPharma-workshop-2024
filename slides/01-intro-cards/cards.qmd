# {cards} 

## {cards} R Package <a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="right" height="138" alt="cards website" /></a>

Let's check out a simple example 

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ard_continuous(ADSL, variables = AGE)
```


## {cards}: `ard_continuous()` arguments

::: {.small}
- `by`: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels

- `statistic`: specify univariate summary statistics. Accepts _any_ function, base R, from a package, or user-defined.

- `fmt_fn`: Override the default formatting functions, e.g. when you need 

:::

```{r}
#| message: true
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               # stats by treatment arm
    statistic = ~list(mean = \(x) mean(x)), # return the mean
    fmt_fn = ~list(mean = 0)                # format the result
  ) |> 
  apply_fmt_fn() # add a character column of rounded results
```

## {cards}: `ard_continuous()` statistics

Subset the default list of "N", "mean", "sd", "median", "p25", "p75", "min", "max

```{r}
ADSL |> 
  ard_continuous( 
    variables = AGE,
    statistic = ~ continuous_summary_fns(c("mean","median"))
  )
```

## {cards}: `ard_continuous()` statistics

```{r}
tidy_ttest <- function(x){
  t.test(x) |> broom::tidy()
}
tidy_ttest(ADSL$AGE)

ard_continuous(
  data = ADSL,
  variables = AGE,
  statistic = ~ list(tidy_ttest = tidy_ttest)
)

```

## {cards}: `ard_continuous()` statistics

```{r}
ard_continuous(
  data = ADSL |> dplyr::mutate(AGE2 = AGE),
  variables = c(AGE, AGE2),
  statistic = list(AGE = list(tidy_ttest = tidy_ttest),
                   AGE2 = continuous_summary_fns())
)
```


## {cards}: `ard_categorical()`

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1,
    statistic = everything() ~ c("n","p") # keep most common stats 
  ) |> 
  print(n = 8)
```

::: {.small}

_Any unobserved levels of the variables will be present in the resulting ARD._
:::

## {cards}: `ard_dichotomous()`

```{r}
#| message: true

ADSL |> 
  ard_dichotomous(variables = AGEGR1, 
                  value = ~ "<65") 

```

By default, `value` will be set to the maximum 

```{r}
#| message: true

ADSL |> 
  ard_dichotomous(variables = AGEGR1) 

```

## {cards}: Other Summary Functions 

- `ard_hierarchical()`: similar to `ard_categorical()`, but built for nested tabulations, e.g. AE terms within SOC

- `ard_complex()`: similar to `ard_continuous()`, but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.

- `ard_missing()`: tabulates rates of missingness

The results from all these functions are entirely compatible with one another, and can be stacked into a single data frame.

## {cards}: Other Functions

In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.

Constructing: `bind_ard()`, `tidy_as_ard()`, `nest_for_ard()`, `check_ard_structure()`, and many more

Wrangling: `shuffle_ard()`, `get_ard_statistics()`, `replace_null_statistic()`, etc.

## Exercise

- Open `exercises/01-cards-partA.R` 

- Compute the demographic summaries as described

```{r}
#| echo: false
#| cache: false
library(countdown)
countdown(minutes = 10, play_sound = TRUE)
```

 

## {cards}: Stacking utilities

::: {.small}
- `data` and `.by` are shared by all `ard_*` calls

- Additional Options `.overall`, `.missing`, `.attributes`, and `.total_n` provide even more results

- By default, summaries of the `.by` variable are included
:::

```{r}
#| message: true
ADSL |> 
  ard_stack( 
    .by = ARM,      
    ard_continuous(variables = AGE, statistic = ~ continuous_summary_fns(c("mean","sd"))), 
    ard_categorical(variables = AGEGR1, statistic = ~ "p")
  )  
```


## {cards}: Hierarchical Summary Functions

Following hierarchical summary functions aid in nested tabulations (e.g. AE terms within SOC):

-   `ard_hierarchical()`: calculating nested subject-level rates

-   `ard_hierarchical_count()`: calculating nested event-level counts
  

## {cards}: `ard_hierarchical` 

::: {.small}

This function specializes in calculating **subject**-level rates.

- Rates computed on lowest level `variables`, nested within others

- `id` helps to check that no duplicate rows exist within the `c(id, variables)` columns

- `denominator` dictates the denominator for the rates

:::

```{r}
#| echo: FALSE

adae <- ADAE |> 
  dplyr::filter(AESOC %in% unique(AESOC)[1:3]) |> 
  dplyr::group_by(AESOC) |> 
  dplyr::filter(AEDECOD %in% unique(AEDECOD)[1:3]) |> 
  dplyr::ungroup()
```

```{r} 
ard_hierarchical(
  data = adae |> dplyr::slice_tail(n = 1L, by = c(USUBJID, TRTA, AESOC, AEDECOD)),
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

## {cards}: `ard_hierarchical_count` 

::: {.small}

This function specializes in calculating **event**-level frequencies.

:::

```{r}
ard_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA
)
```

## Hierarchical summaries many ways

- Displays for hierarchical data typically report on each level of the hierarchy (Any AE Overall, by System Organ Class, by Preferred Term)

- This can mean several calls to the `ard_hierarchical_*` functions 

- Further, subject-level summaries require a different subset of the data each time. For example, to calculate Overall rates, we need to subset to 1 record per subject in ADAE. 

::: {.fragment}
- Is there an easier way?
:::

## {cards}: Stacking function for `ard_hierarchical()`

::: {.small}

- `ard_hierarchical` stacking functions simplify this multi-step process into a single step

- The `id` argument is used to subset the data along the way

:::

```{r}
#| eval: FALSE
ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

```{r}
#| echo: FALSE
ard_hier <- ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )

```

## {cards}: Stacking function for `ard_hierarchical_count()`

::: {.small}

- Below is the stacking function for event-level summaries, aligned with `ard_hierarchical_count()`

:::

```{r}
#| eval: FALSE
ard_stack_hierarchical_count(
  data = ADAE,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)
```

```{r}
#| echo: FALSE
ard_hier_c <- ard_stack_hierarchical_count(
  data = ADAE,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier_c |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )
```


## Exercise

- Open `exercises/01-cards-partB.R` 

- Compute the nested AE tabulations as described

```{r}
#| echo: false
#| cache: false
library(countdown)
countdown(minutes = 8, play_sound = TRUE)
```

